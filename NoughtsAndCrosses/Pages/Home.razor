@page "/"

<style>
    :root {
        color-scheme: light dark;

        --background: light-dark(#ffffff, #000000);
        --foreground: light-dark(#000000, #ffffff);

        --border: thin solid var(--foreground);

        --boardSize: 192px;
    }
    
    body {
        padding: 4px;
    }

    button {
        background: var(--background);
        border: var(--border);
        border-radius: 0px;
    }

    #board {
        width: var(--boardSize);
        height: var(--boardSize);
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 4px;
    }

    .cell {
        font-size: 32px;
        width: calc(var(--boardSize) / 3);
        height: calc(var(--boardSize) / 3);
    }

    #panel {
        font-size: 8px;
        width: var(--boardSize);
        background: var(--background);
        border: var(--border);
        padding: 2px;
    }

    #line {
        width: var(--boardSize);
        height: var(--boardSize);
        position: absolute;
        z-index: 2;
    }
</style>

<PageTitle>Noughts and crosses</PageTitle>

<div id="board">
    @{
        for (int y = 0; y < 3; y++)
        {
            for (int x = 0; x < 3; x++)
            {
                int y0 = y;
                int x0 = x;
                <button class="button cell" @onclick="() => SetCell(x0, y0)">
                    @((char)_board[y, x])
                </button> 
            }
        }


        switch (_status.Type)
        {
            case GameStatusType.HorizontalWin: 
                int y = _status.Origin * 64 + 32;
                <svg id="line">
                    <line x1="0%" y1="@y" y2="@y" style="stroke:red;">
                        <animate attributeName="x2" begin="0s" dur="0.5s" from="0%" to="100%" fill="freeze"/>
                    </line>
                </svg>
                break;

            case GameStatusType.VerticalWin:
                int x = _status.Origin * 64 + 32;
                <svg id="line">
                    <line x1="@x" y1="0%" x2="@x" style="stroke:red;">
                        <animate attributeName="y2" begin="0s" dur="0.5s" from="0%" to="100%" fill="freeze"/>
                    </line>
                </svg>
                break;

            case GameStatusType.LeftRightDiagonalWin:
                <svg id="line">
                    <line x1="0%" y1="0%" style="stroke:red;">
                        <animate attributeName="x2" begin="0s" dur="0.5s" from="0%" to="100%" fill="freeze"/>
                        <animate attributeName="y2" begin="0s" dur="0.5s" from="0%" to="100%" fill="freeze"/>
                    </line>
                </svg>
                break;

            case GameStatusType.RightLeftDiagonalWin:
                <svg id="line">
                    <line x1="100%" y1="0%" style="stroke:red;">
                        <animate attributeName="x2" begin="0s" dur="0.5s" from="100%" to="0%" fill="freeze"/>
                        <animate attributeName="y2" begin="0s" dur="0.5s" from="0%" to="100%" fill="freeze"/>
                    </line>
                </svg>
                break;
        }
    }
</div>


<div id="panel">
    <button @onclick="() => Reset()">⭯</button>
</div>

@code {
    enum Piece
    {
        None = ' ',
        Nought = 'O',
        Cross = 'X',
    }

    enum GameStatusType
    {
        InProgress,
        HorizontalWin,
        VerticalWin,
        LeftRightDiagonalWin,
        RightLeftDiagonalWin,
        Draw
    }

    struct GameStatus
    {
        public GameStatus(GameStatusType type, int origin = 0)
        {
            Type = type;
            Origin = origin;
        }

        public GameStatusType Type;
        public int Origin;
    }

    private Piece[,] _board;
    private Piece _turn;
    private GameStatus _status;
    private int _plays;

    protected override void OnInitialized() => Reset();

    private void SetCell(int x, int y)
    {
        if (_status.Type != GameStatusType.InProgress)
            return;

        if (_board[y, x] != Piece.None)
            return;

        _board[y, x] = _turn;
        _plays++;
        _status = GetGameStatus();

        if (_status.Type == GameStatusType.InProgress)
            _turn = _turn == Piece.Nought ? Piece.Cross : Piece.Nought;
    }

    private GameStatus GetGameStatus()
    {
        // Check horizontal
        for (int y = 0; y < 3; y++)
            if (_board[y, 0] != Piece.None && _board[y, 0] == _board[y, 1] && _board[y, 1] == _board[y, 2])
                return new GameStatus(GameStatusType.HorizontalWin, y);

        // Check vertical
        for (int x = 0; x < 3; x++)
            if (_board[0, x] != Piece.None && _board[0, x] == _board[1, x] && _board[1, x] == _board[2, x])
                return new GameStatus(GameStatusType.VerticalWin, x);

        // Check left-right diagonal
        if (_board[0, 0] != Piece.None && _board[0, 0] == _board[1, 1] && _board[1, 1] == _board[2, 2])
            return new GameStatus(GameStatusType.LeftRightDiagonalWin);

        // Check right-left diagonal
        if (_board[0, 2] != Piece.None && _board[0, 2] == _board[1, 1] && _board[1, 1] == _board[2, 0])
            return new GameStatus(GameStatusType.RightLeftDiagonalWin);

        if (_plays == 9)
            return new GameStatus(GameStatusType.Draw);

        return new GameStatus(GameStatusType.InProgress);
    }

    private void Reset()
    {
        _board = new Piece[3, 3]{
             {Piece.None, Piece.None, Piece.None},
             {Piece.None, Piece.None, Piece.None},
             {Piece.None, Piece.None, Piece.None}
        };
        _turn = Piece.Nought;
        _status = new GameStatus(GameStatusType.InProgress);
        _plays = 0;
    }
}